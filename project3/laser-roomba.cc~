/**
 * laser-roomba.cc
 *  
 *  Group 12: Jennie Kang, Edmund Lam, Jamila Toaha
 *  
 *  Project 3 - Part 2 - Laser Navigation 
 *  
 *  This program uses laser sensor to help a robot avoid obstacles.
 *  Basic Logic robot uses to make it's way through the maze: 
 *   - Lane Rules: When enclosed within a lane, it centers itself by alternating with a 2 step process: 
 *     1) If off center, it heads toward centers (rotates at an angle, that is based on whether 
 *        right or left range is larger). 
 *     2) Once at center, it adjusts itself by rotating in opposite angle from part 1. 
 *        - If it goes off center, repeats part 1, and then repeats part 2 again when reaches center, and so on.
 *   - Crevice Rules: When it reaches an opening at the end of a lane, robot follows different rules, when robot senses an opening on 
 *     left and right sides: 
 *        - When it senses a wall that is less than a 1 meter away, it rotates about ~90 degrees and moves forward, 
 *          repeats process with second wall, and then heads into a lane
 *   - Top Left Rule: When it reaches the top left, and robot detects that it is closed in, it stops .5 meters away from wall
 * 
 *  Date: 10/27/2020 - 11/2/2020
 *
 * Sample code for a robot that has two front bumpers and a laser scanner.
 * Suitable for use with the roomba.
 *
 * Written by: Simon Parsons
 * Date:       11th October 2011
 *  
 **/


#include <iostream>
#include <libplayerc++/playerc++.h>
using namespace PlayerCc;  


/**
 * Global Variables
 *
 **/


  double maxRange, minLeft, minRight, range, bearing, middleScanLine;
  double leftRange, rightRange;
  int points;


/**
 * Function headers
 *
 **/


void printLaserData();
void printRobotData(BumperProxy& bp);

/**
 * main()
 *
 **/
int main(int argc, char *argv[])
{  
	

  // Variables
  int counter = 0;
  double speed = 0;            // How fast do we want the robot to go forwards?
  double turnrate = 0;         // How fast do we want the robot to turn?
  player_laser_data laser; // For handling laser data



  // Set up proxies. These are the names we will use to connect to 
  // the interface to the robot.
  PlayerClient    robot("localhost");  
  BumperProxy     bp(&robot,0);  
  Position2dProxy pp(&robot,0);
  LaserProxy      sp (&robot, 0);

  // Allow the program to take charge of the motors (take care now)
  pp.SetMotorEnable(true);

  // Main control loop

	int counterForCentering1 = 0; // when in a lane
	int counterForCentering2 = 0; // when in a lane
	int counterForTurning = 0;    // when switching between lanes
	int degrees = 0;
  while(true) 
    {    
      // Update information from the robot.
      robot.Read();



      // Print information about the laser. Check the counter first to stop
      // problems on startup
      // Note: the values have been adjusted for 1 decimal value. Otherwise, there is a lower probability of an exact match
      if(counter > 2){
  	  maxRange  = (double) ((int)(sp.GetMaxRange()*10/1))/10;
	  minLeft   = (double) ((int)(sp.MinLeft()*10/1))/10;
	  minRight  = (double) ((int)(sp.MinRight()*10/1))/10;
	  points    = (double) ((int)(sp.GetCount()*10/1))/10;
	  range     = (double) ((int)(sp.GetRange(5)*10/1))/10;
     middleScanLine = (double) ((int)(sp.GetRange(180)*10/1))/10;  // straight ahead range
	  bearing   = (double) ((int)(sp.GetBearing(5)*10/1))/10;
	  leftRange = (double) ((int)(sp.GetRange(360)*10/1))/10;  // left most range
   	  rightRange =(double) ((int)(sp.GetRange(0)*10/1))/10;    // right most range
	printLaserData();
      }

      // Print data on the robot to the terminal
      printRobotData(bp);
      
           // If either bumper is pressed, stop. Otherwise just go forwards

      if(bp[0] || bp[1]){
	speed= 0;
	turnrate= 0;
      } 


	/****** TOP LEFT RULE:  Stops robot .5 meters before top left wall and ends program ******/
	// Basically checks if the robot is closed in on all three sides
	// by checking the max values of the left-most and right-most points, adds up value, 
	// and makes sure value is between 2.2 and 2.5. Then it makes sure it's close to wall as possible 
	// before stopping. In this case .5 meters away.
 	else if(leftRange + rightRange <= 2.5 && leftRange + rightRange > 2.2 && middleScanLine <= .5) {
		speed = 0;
		turnrate = 0;
		pp.SetSpeed(speed, turnrate); // Set final speeed and turnrate before breaking out of program,
					      // otherwise robot seems to keep going
			break;
	}
  
	/****** LANE RULES *******/
	// Lane Rules: Adjust robot to center of lane if not centered
	// part 1/2 - if robot is off center, head towards the center
	else if(leftRange + rightRange < 2.8 && maxRange > 2 && (minLeft > minRight || minLeft < minRight) ) {

  std::cout << "Centering Part 1 " << counterForCentering1 << std::endl;
			// Momentarily stops robot for 1 second, while it shifts it's rotation, then it moves forward,
			 //if(counterForCentering1 == 0) 
			degrees = minLeft > minRight ? 20 : -20;

			if(counterForCentering1++ < 10){ 
				speed= 0;
                       		turnrate = dtor(degrees);
			} 
			else if (counterForCentering1 > 80) {
				// Sometimes when in the lane for prolonged time,
				// the robot forgets to center itself.
				// This helps trigger the process again
				// first 8 seconds gives time for robot to adjust itself, 
				// if it's really off center, like in the beginning
				counterForCentering1 = 0;
			}
			else {
				turnrate = 0;
				speed = .3;
			} 
		
	} 

	// Lane Rules: Adjust robot to center of lane if not centered 
	// part 2/2 - when it reaches the center, it rotates in opposite direction set in part 1 and 
	// alternates as needed. For example, if part 1 is rotated 20 degrees, in part 2 will it rotate -20 degrees.
	else if( leftRange + rightRange < 2.8 && minLeft == minRight) {
  std::cout << "Centering Part 1 " << counterForCentering2 << std::endl;
			if(counterForCentering2++ < 10) {
				speed= 0;
				turnrate = dtor(degrees * -1); // Straightens out robot using opposite angle
			}
			else {
 			       // If it's even, it will continue going straight ahead. 
				turnrate = 0;
				speed = .3;
			}
				counterForCentering1 = 0; // This is reset so part 1 can adjust towards the center, when not even. 
	
	}

	/****** CREVICE RULES:  this checks if the robot is not in a lane/ in a turning crevice. ********/
	// It knows this, by checking the value of the sum of the left and right ranges
	// It basically rotates 90 degrees before hitting walls in the crevice and makes its way into a lane
 	else  if (leftRange + rightRange > 2.6 ) {

		

	// This detects if there is a deadend straight ahead. If so, starts off the counter for turning
	if (middleScanLine < 1) {
		counterForTurning = 1;
	}

	// If the counter for turning is triggered, will turn according to relevant side, for an angle that is 
	// less than but close to 90 degrees for about a 3 second interval (27 cycles) (~30 degrees per second)
	  if(counterForTurning > 0 && counterForTurning < 27) {
				speed= 0;

				// Turns robot about 90 degrees within a ~3 second interval (27)
				turnrate = leftRange > rightRange ? dtor(27) : dtor (-27); 
				counterForTurning++;
			}
			else {
			 	counterForCentering1 = 0;
				counterForTurning = 0;
				turnrate = 0;
				speed = .3;
			} 
		counterForCentering1 = 0;

	} 
	/***** DEFAULT RULE ******/
	 else {
		// Keep going forward and reset values so they don't interfere on next iterations
		counterForCentering1 = 0;
		speed = 0.3;
		turnrate = 0;
	}
    

      // What are we doing?
      std::cout << "Speed: " << speed << std::endl;      
      std::cout << "Turn rate: " << turnrate << std::endl;

      // Send the commands to the robot
      pp.SetSpeed(speed, turnrate);  
	
      // Count how many times we do this
      counter++;
      std::cout << "Counter: " << counter << std::endl <<std::endl;
    }
  
} // end of main()


void printLaserData()
{

  // This illustrates the things the proxy provides. These should be self-explanatory
  // if you look at the print statements, except possible GetRange(5) and GetBearing(5).
  // These allow you to access one particular reading. You might want to use this
  // to look through all the values in a given arc to find the closest object.

  std::cout << "Laser says..." << std::endl;
  std::cout << "Maximum distance I can see: " << maxRange << std::endl;
  std::cout << "Number of readings I return: " << points << std::endl;
  std::cout << "Closest thing on left: " << minLeft << std::endl;
  std::cout << "Closest thing on right: " << minRight << std::endl;
  std::cout << "Range of a single point: " << range << std::endl;
  std::cout << "Bearing of a single point: " << bearing << std::endl;

  std::cout << "Range of a middle scan line: " << middleScanLine << std::endl;
  std::cout << "Range of Left Most Point: " << leftRange << std::endl;
  std::cout << "Range of Right Most Point: " << rightRange << std::endl;

  return;
} // End of printLaserData()

/**
 *  printRobotData
 *
 * Print out data on the state of the bumpers and the current location
 * of the robot.
 *
 **/


void printRobotData(BumperProxy& bp)
{

  // Print out what the bumpers tell us:
  std::cout << "Left  bumper: " << bp[0] << std::endl;
  std::cout << "Right bumper: " << bp[1] << std::endl;

  // Might want to add odometry data here also, but then you'd have
  // to pass the position proxy to the function.

} // End of printRobotData()
